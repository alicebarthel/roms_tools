***GENERATING INPUT FILES***

cice_grid.py: Given a ROMS grid file, create corresponding CICE grid and kmt
              (land mask) files.
	      To run: Open python or ipython, and type "run cice_grid.py." The
	              script will prompt you for paths to the existing ROMS
		      grid file and the desired CICE grid and kmt files.

woa_netcdf.py: Converts World Ocean Atlas temperature and salinity data from
               text file (FESOM input format) to NetCDF.
	       To run: First edit user parameters (file paths) near the top of
	               the file. Then open python/ipython and type "run
		       woa_netcdf.py".

romscice_ini_woa.py: Builds a ROMS initialisation file using World Ocean Atlas
                     data for temperature and salinity; starts with a motionless
		     ocean and zero sea surface height. Under ice shelves,
		     extrapolates temperature and salinity using
		     nearest-neighbour techniques. Uses WOA data assumed to be
		     converted from FESOM input using woa_netcdf.py.
		     To run: First edit user parameters (file paths and grid
		             parameters) near the bottom of the file (after the
			     Then make sure that you have scipy version 0.14 or
			     higher (on raijin, this  means switching to
			     python/2.7.6; instructions at the top of the file).
			     Then open python/ipython and type "run
			     romscice_ini_woa.py".

romscice_ini_ecco.py: Builds a ROMS initialisation file using ECCO2 data for
                      temperature and salinity; starts with a motionless ocean
		      and zero sea surface height. In ice shelf cavities,
		      temperature and salinity are linearly extrapolated
		      using nearest-neighbour as in romscice_ini_woa.py.
		      To run: First edit user parameters (file paths and grid
		              parameters) near the bottom of the file. Then make
			      sure that you have scipy version 0.14 or higher
			      (on raijin, this means switching to python/2.7.6;
			      instructions at the top of the file). Then open
			      python/ipython and type "run romscice_ini.py".

romscice_nbc.py: Builds a ROMS northern lateral boundary condition file from 1
                 year of monthly ECCO2 data for temperature, salinity, and
		 meridional velocity (set zonal velocity and sea surface height
		 to zero). Also contains useful code for calculating volume
		 averages.
		 To run: Edit user parameters near the top of the script
		         (mainly just file paths). Then make sure that you have
			 scipy version 0.14 or higher (on raijin, this means
			 switching to python/2.7.6; instructions at the top
			 of the file). Then open python or ipython and type
			 "run romscice_nbc.py".

convert_era.job: A self-submitting batch job which converts 1 year of
                 ERA-Interim sub-daily data into a ROMS-CICE forcing file,
		 in chunks of 100 6-hour timesteps at once (otherwise the python
		 memory overflows because this is a LOT of data). Depends on
		 roms_cice_atm_subdaily.py.
		 To run: First edit user parameters in romscice_atm_subdaily.py
		         (see below). Then edit the PBS job settings at the top
			 of this file. Then, to get the batch jobs started for
			 a given year (say 1992), type
			 qsub -v YEAR=1992,COUNT=0 convert_era.job
			 You can also submit multiple years quickly with a bash
			 loop:
			 for i in `seq 1992 2005`;
			 do
			     qsub -v YEAR=$i,COUNT=0 convert_era.job
			 done

romscice_atm_subdaily.py: Convert 100 6-hour timesteps of an ERA-Interim
                          atmospheric forcing file (plus 50 12-hour timesteps
			  of ERA-Interim precipitation) to a ROMS-CICE forcing
			  file. Rotate the winds to local x-y space for ROMS
			  grid.
			  To run: Edit user parameters near the top of the
			          script (mainly just file paths). This script
				  is designed to be called by a self-submitting
				  batch job, e.g. convert_era.job.

romscice_atm_monthly.py: Convert ERA-Interim files of monthly averaged
                         atmospheric forcing to ROMS-CICE input forcing files
			 on the correct grid and with the correct units.
			 To run: Edit file paths near the top of the file and
			         start/end years near the bottom. Then open
				 python or ipython and type "run
				 romscice_atm_monthly.py".

romscice_nbc_rep.py: Given a ROMS lateral bounday condition file with one year
                     of monthly data, convert it to a file which can be used
		     repeatedly year after year (for eg spinup).
		     To run: Edit the user parameter (path to LBC file)
		             near the bottom of the file. Then open python or
			     ipython and type "run romscice_nbc_rep.py".

repeat_forcing.py: If you are spinning up ROMS-CICE-MCT using one repeating year
                   of daily- or sub-daily atmospheric forcing, the easiest
		   option is to have ROMS and CICE follow regular calendars
		   (1995, 1996, 1997, etc) and make 4 copies of this annually-
		   repeating file which the models will cycle through every
		   4 years. One of these years (depending on the start year)
		   must be a leap year. Once you have made four copies of the
		   one-year (non-leap-year) dataset, and named them with the
		   same naming convention (e.g. AN_yyyy_unlim.nc), this script
		   will 1) set the cycle_length attribute to 4 years in each
		   file; 2) alter the time axis of the latter 3 files so they
		   follow the first in sequence; and 3) interpolate data for
		   Feb 29th on the leap year, as the average of the Feb 28th and
		   March 1st records from the same time of day.
		   To run: Edit the user parameters near the bottom of the file
		           (paths to forcing files, years, variable names, etc)
			   then open python or ipython and type
			   "run repeat_forcing.py".

repeat_forcing_monthly.py: Same as repeat_forcing but for monthly forcing fields
                           rather than sub-daily. No interpolation is needed,
			   just modifying the time axis to put all data on the
			   15th of each month, with a cycle length of 4 years.
			   To run: Edit the user parameters near the bottom of
			           the file (paths to forcing files, years)
				   then open python or ipython and type
				   "run repeat_forcing_monthly.py".

romscice_nbc_zeta.py: Interpolate AVISO sea surface height climatology
                      (annual average) to the northern boundary of the ROMS
		      grid. Save to the existing lateral boundary condition
		      file, created using romscice_nbc.py.
		      To run: Edit file paths and boundary index near the top
		              of the file. Then make sure that you have scipy
			      version 0.14 or higher (on raijin, this means
			      switching to python/2.7.6; instructions at the
			      top of the file). Then open python or ipython
			      and type "run romscice_nbc_zeta.py". You will
			      be prompted for the path to the lateral
			      boundary condition file that you want to add
			      zeta to.

nbdry_grid_hack.py: Modify the ROMS grid so that the northernmost 15 rows
                    (about 3 degrees) have the same bathymetry, i.e. dh/dy=0,
		    on advice of Matt Mazloff.
		    To run: Open python or ipython and type
		            "run nbdry_grid_hack.py".

romscice_tides.py: Create a ROMS tide file containing the first 10 tidal
                   components interpolated from TPXO 7.2. (This is NOT the same
		   as Kate's potential tides option; it is for SSH_TIDES rather
		   than POT_TIDES.)
		   To run: Make sure the paths near the top of the file, to the
		           ROMS grid, TPXO 7.2 file, and desired output file,
			   are correct. Then make sure that you have scipy
			   version 0.14 or higher (on raijin, this means
			   switching to python/2.7.6; instructions at the top
			   of the file). Then open python or ipython and type
			   "run romscice_tides.py".

add_tide_period.py: Given a ROMS tide file with tidal potential amplitude and
                    phase angle (created using Kate's potential tide scripts),
		    add the tidal period in seconds for each component.
		    To run: First edit the variable "tide_file" to point to the
		            correct file to edit. Then open python or ipython
			    and type "run add_tide_period.py".

remove_cavities.py: Remove the ice shelf cavities from the given ROMS grid file
                    and fill them in with land. After you run this script, I
		    suggest you remove the variables "zice" and "mask_zice"
		    from the file using NCO, to avoid any confusion later.
		    To run: Open python or ipython and type
		            "run remove_cavities.py". You will be prompted for
			    the path to the ROMS grid file you wish to edit.

uvp_grid_fix.py: The Matlab scripts I use to generate the ROMS grid assume that
                 the u-grid, v-grid, and psi-grid points have the same locations
		 as the rho-grid, and they just chop off the last point in the
		 required dimension(s). This is not correct. This script fixes
		 that.
		 To run: Open python or ipython and type "run uvp_grid_fix.py".
		         You will be prompoted for the path to the ROMS grid
			 file you wish to edit.

iceberg_melt.py: Read Martin and Adcroft's monthly climatology of freshwater
                 fluxes from iceberg melt, interpolate to the ROMS grid, and
		 save as a forcing file.
		 To run: First make sure the paths to the input iceberg data
		         are correct. Then open python or ipython and type
			 "run iceberg_melt.py". The script will prompt you for
			 the filename of the output ROMS forcing file.

cice_ini.py: Make a CICE initial conditions file (non-standard option
             ice_ic='mask') based on NSIDC satellite observations of sea ice
	     concentration. Wherever concentration exceeds 15%, set it to 100%;
	     everywhere else, set it to 0%. The CICE code will read this "mask"
	     and set a constant sea ice thickness of 1 m and snow thickness of
	     0.2 m.
	     To run: Make sure you have an NSIDC file containing the CDR monthly
	             average of sea ice concentration for the month you want.
		     Then open python or ipython and type "run cice_ini.py".
		     The script will prompt you for the path to the NSDIC file,
		     the ROMS grid file, and the desired output file.

paul_holland_hack.py: Paul Holland prevents spurious deep convection by applying
                      an extra 1500 Gt/y of freshwater flux spread evenly south
		      of 60S. Using the ROMS grid, calculate what the rate of
		      input should be in kg/m^2/s. Print the value to the
		      screen.
		      To run: Open python or ipython and type
		              "run paul_holland_hack.py". The script will prompt
			      you for the path to the ROMS grid file.

romscice_evap.py: Read one year of ERA-Interim evaporation data (12-hourly), 
                  interpolate to the ROMS grid, and add to the existing FC
		  forcing file created using romscice_atm_subdaily.nc.
		  To run: Edit user parameters near the top of the script
		          (mainly just file paths). This script is designed to
			  be called by a self-submitting batch job, e.g.
			  era_evap.job.

era_evap.job: A self-submitting batch job which converts 1 year of ERA-Interim
              evaporation 12-hourly data into an existing ROMS-CICE forcing file
	      (created using romscice_atm_subdaily.py) in chunks of 50 12-hour
	      timesteps at once (otherwise the python memory overflows because
	      this is a LOT of data). Depends on romscice_evap.py.
	      To run: First edit user parameters in romscice_evap.py (see
	              above). Then edit the PBS job settings at the top of this
		      file. Then, to get the batch jobs started for a given
		      year (say 1992, type
		      qsub -v YEAR=1992,COUNT=0 era_evap.job
		      You can also submit multiple years quickly with a bash
		      loop:
		      for i in `seq 1992 2005`;
		      do
			qsub -v YEAR=$i,COUNT=0 era_evap.job
		      done

romscice_gpcp.py: Convert one year of GPCP monthly averages for total
                  precipitation to a ROMS-CICE input forcing file.
		  To run: First make sure the paths near the top of the script
		          (for the ROMS grid, GPCP input files, and desired
			  output files) are correct. Then open python or ipython
			  and type "run romscice_gpcp.py". The years 1992-2005
			  will be processed in a loop.

find_isolated_points.py: Find all of the CICE grid points which are land (or ice
                         shelf) on 3 sides. Sea ice can grow in these isolated
			 points but cannot escape due to CICE's coastal boundary
			 conditions, so it gets crazy thick (like 2 km thick).
			 Print the indices of these points to the screen. This
			 script assumes a periodic boundary in the longitude
			 direction
			 To run: Edit the variables start_j, end_j for the range
			         of j-indices you care about (i.e. could
				 possibly grow sea ice). Then open python or
				 ipython and type "run find_isolated_points.py".
				 The script will prompt you for the path to your
				 CICE land mask (kmt) file. Run cice_grid.py
				 if this file doesn't exist yet.

fix_isolated_points.py: Based on the results of find_isolated_points.py, fix
                        all the points which are isolated on 3 sides in the CICE
			grid, by editing the ROMS grid. Set some of them to ice
			shelf points (with zice the average of the correct
			neighbour values), some to land points, remove the ice
			shelves on others, and make other land points ocean
			points (with h the average of the correct neighbour
			values). After running this script, rerun cice_grid.py
			to update the CICE grid. This script is grid-specific
			and manually written. If you are editing it for a new
			grid, make sure you take into account the ghost cells
			in ROMS and CICE: point (i,j) in CICE is point (i+1,j+1)
			in ROMS.
			To run: Decide what you want to do for each point
			        flagged by find_isolated_points.py, and edit
				this script accordingly. Make sure the path to
				the ROMS grid file is correct. Then open python
				or ipython and type "run fix_isolated_points.py"

romscice_sss_nudging.py: Interpolate the World Ocean Atlas 2013 monthly
                         climatology of sea surface salinity to the ROMS grid,
			 for use in surface salinity restoring.
			 To run: Make sure the paths to the ROMS grid file,
			         WOA input files, and desired output file
				 are correct (near the top of the file). Then
				 make sure that you have scipy version 0.14 or
				 higher (on raijin, this means switching to
				 python/2.7.6; instructions at the top of the
				 file). Then open python or ipython and type
				 "run romscice_sss_nudging.py".

romscice_flux_correction.py: Build a monthly climatology of the extra surface
                             salt flux due to surface salinity restoring in a
			     long ROMS run. Save as a NetCDF file that can be
			     used as a forcing file for another ROMS run
			     (option SSFLUX_EXTRA) with surface salinity
			     restoring off.
			     To run: First make sure you have concatenated the
			             ROMS averages files from the long
				     simulation into a single file, or at least
				     the ssflux_restoring variable. Then open
				     python or ipython and type
				     "run romscice_flux_correction.py". The
				     script will prompt you for the paths to
				     the concatenated ROMS averages file and
				     the desired output forcing file.

get_rms_tide_vel.m: Matlab script (the horror!) which calls the TMD/CATS2008a
                    tidal model:
		    https://www.esr.org/polar_tide_models/Model_CATS2008a.html
		    to get the RMS tidal velocity (sum of 10 constituents) for
		    each point on the ROMS grid. Outputs to a NetCDF file, which
		    can be used as a forcing file in MetROMS if you activate
		    ICESHELF_RMS_TIDES.


***POST-PROCESSING DIAGNOSTIC FILES***

make_density_file.py: Given an ocean history or averages file with temperature
                      and salinity data, calculate density fields at each
		      timestep using the 1980 UENSCO seawater equation of
		      state. Save in a new file.
		      To run: Open python or ipython, and type
		              "run make_density_file.py". The script will
			      prompt you for the paths to the ROMS grid file,
			      the ocean history or averages file, and the
			      desired path to the new density file.

common_grid.py: Interpolates ROMS output to a regular quarter-degree grid for
                easy comparison with FESOM. Writes monthly averages of surface
		heat and salt flux, the surface stress vector and its curl, and
		the sea ice velocity vector.
		To run: First concatenate your ROMS and CICE output into one
		        long file for each model, containing 5-day averages for
			the entire simulation starting from 1 Jan. Then open
			python or ipython and type "run common_grid.py". The
			script will prompt you for the paths to the ROMS and
			CICE output files, and the desired output file on the
			common grid.

calc_rx1.py: Calculate the rx1 field (measure of grid steepness) for the given
             grid and vertical stretching parameters. Save to a NetCDF file.
	     To run: Figure out what your vertical stretching parameters are
	             by looking at your *.in configuration file, or you can
		     just experiment based on other people's choices. Then
		     open python or ipython and type "run calc_rx1.py". The
		     script will prompt you for the paths to your ROMS grid
		     file and desired output file, as well as the vertical
		     stretching parameters. Note that this script assumes
		     Vtransform=2 (as do all scripts which call calc_z.py).

plot_layers.py: Plot the terrain-following vertical levels through a given
                longitude, in a latitude vs. depth slice. This is a good way
		to test out different choices for vertical stretching
		parameters.
		To run: Figure out what your vertical stretching parameters are
		        by looking at your *.in configuration file, or you can
			just experiment based on other people's choices. Then
			open python or ipython and type "run plot_layers.py".
			The script will prompt you for the ROMS grid file, the
			longitude to interpolate to, and your vertical
			stretching parameters. The plot will be displayed on
			screen, and the script will repeat as many times as you
			like.

seasonal_climatology_roms.py: Calculate the seasonal climatology (DJF, MAM, JJA,
                              SON) of ocean temperature and salinity during a
			      ROMS simulation and save to a NetCDF file.
			      To run: First make sure your output is saved in
			              numbered ocean_avg_*.nc files containing
				      5-day averages. Then open python or
				      ipython and type
				      "run seasonal_climatology_roms.py". The
				      script will prompt you for the path to
				      the directory containing the ROMS output
				      files, the file indices to process
				      (eg ocean_avg_0001.nc to ocean_avg_0102.nc
				      means indices 1 to 102), and the path
				      to the desired output file.

seasonal_climatology_cice.py: Calculate the seasonal climatology (DJF, MAM, JJA,
                              SON) of sea ice concentration and thickness
			      during a CICE simulation and save to a NetCDF
			      file.
			      To run: First make sure your output is saved in
			              a single directory with the form
				      iceh.*.nc, each containing one 5-day
				      average, with no other files of that form
				      in that directory. Then open python or
				      ipython and type
				      "run seasonal_climatology_cice.py". The
				      script wil prompt you for the path to this
				      directory and to the desired output file.


***DIAGNOSTIC FIGURES***

plot_kinetic_energy.py: Extracts the kinetic energy values written in the
                        ocean.log files (you can supply as many ocean.log files
			as you like, from e.g. a long run split into several
			simulations) and plots the timeseries.
			To run: Open python or ipython, and type "run
			        plot_kinetic_energy.py". The script will prompt
				you for the paths to as many sequential
				ocean.log files as you like, as well as the
				timestep length and the output frequency for
				ocean.log (INFOSTEP in Params.py if you are
				using ROMS-CICE-MCT).

plot_maxspeed.py: Extracts the maximum velocity values written in the ocean.log
                  files (you can supply as many ocean.log files as you like,
		  from e.g. a long run split into several simulations) and plots
		  the timeseries.
		  To run: Open python or ipython, and type "run
		          plot_maxspeed.py". The script will prompt you for the
			  paths to as many sequential ocean.log files as you
			  like, as well as the timestep length and the output
			  frequency for ocean.log (INFOSTEP in Params.py if you
			  are using ROMS-CICE-MCT).

plot_volume.py: Extracts the volume values written in the ocean.log files (you
                can supply as many ocean.log files as you like, from e.g. a
		long run split into several simulations), converts them into
		percent anomalies (with respect to the initial value), and
		plots the timeseries.
		To run: Open python or ipython, and type "run plot_volume.py".
		        The script will prompt you for the paths to as many
			sequential ocean.log files as you like, as well as the
			timestep length and the output frequency for ocean.log
			(INFOSTEP in Params.py if you are using ROMS-CICE-MCT).

max_vel.py: Calculate the maximum |u| and |v| at each timestep of the given
            ocean history (or averages) file, and plot the timeseries.
	    To run: Open python or ipython, and type "run max_vel.py". The
	            script will prompt you for the path to the ocean history
		    file.

avg_zeta.py: Calculate the area-averaged sea surface height at each timestep of
             the given ocean history (or averages) file, and plot the
	     timeseries. This script also contains useful code for calculating
	     area averages.
	     To run: Open python or ipython, and type "run avg_zeta.py". The
	             script will prompt you for paths to the ocean history
		     and ROMS grid files.

timeseries_seaice.py: Calculates and plots timeseries of total sea ice area and
                      volume during a ROMS-CICE simulation. Also writes the
		      timeseries to a log file so they don't have to be
		      recomputed if the run is extended; at the beginning of
		      this script, previous values will be read from the same
		      log file if it exists.
		      To run: Open python or ipython and type
		              "run timeseries_seaice.py". The script will
			      prompt you for the paths to the CICE history file
			      and the log file.			      

timeseries_massloss.py: Calculates and plots timeseries of basal mass loss and
                        area-averaged melt rates from major ice shelves and the
			entire continent during a ROMS simulation. Also writes
			the timeseries to a log file so they don't have to be
			recomputed if the run is extended; at the beginning of
			this script, previous values will be read from the same
			log file if it exists.
	                To run: Open python or ipython, and type
			        "run timeseries_massloss.py". The script will
				prompt you for the paths to the ocean history
				or averages file and the log file. If you are
				using ice shelf draft data from something other
				than RTopo 1.05 you might need to tweak the lat
				and lon limits.

timeseries_dpt.py: Calculates and plots timeseries of Drake Passage transport
                   during a ROMS simulation. Also writes the timeseries to a
		   log file so it doesn't have to be recomputed if the run is
		   extended; at the beginning of this script, previous values
		   will be read from the same log file if it exists.
		   To run: Open python or ipython and type
		           "run timeseries_dpt.py". The script will prompt you
			   for the paths to the ROMS grid file, the ocean
			   history or averages file, and the log file.

timeseries_3D.py: Calculates and plots timeseries of total ocean heat content,
                  average salinity, and total kinetic energy during a ROMS
		  simulation. Also writes the timeseries to a log file so they
		  don't have to be recomputed if the run is extended; at the
		  beginning of this script, previous values will be read from
		  the same log file if it exists.
		  To run: Open python or ipython and type
		          "run timeseries_3D.py". The script will prompt you
			  for the paths to the ROMS grid file, the ocean history
			  or averages file, and the log file.

timeseries_sss.py: Calculates and plots timeseries of area-averaged sea surface
                   salinity, surface salt flux, and surface salt flux due to
		   salinity restoring during a ROMS simulation. Also writes the
		   timeseries to a log file so it doesn't have to be recomputed
		   if the run is extended; at the beginning of this script,
		   previous values will be read from the same log file if it
		   exists.
		   To run: Open python or ipython and type
		           "run timeseries_sss.py". The script will prompt you
			   for the path to the ROMS averages file and the log
			   file.

timeseries_i2osalt.py: Calculates and plots timeseries of area-averaged sea ice
                       to ocean salt flux during a ROMS simulation. Also writes
                       the timeseries to a log file so it doesn't have to be
		       recomputed if the run is extended; at the beginning of
		       this script, previous values will be read from the same
		       log file if it exists.
		       To run: Open python or ipython and type
		               "run timeseries_i2osalt.py". The script will
			       prompt you for the path to the CICE history file
			       and the log file.

aice_animation.py: Create an animation of sea ice concentration for the given
                   simulation, and save as an mp4 file.
		   To run: If you are on raijin, first type "module load ffmpeg"
		           to make sure you will be able to write the mp4 file.
			   Then edit the variables "directory", "num_ts", and
			   "start_file" near the top of the file to suit your
			   simulation. Then open python or ipython and type
			   "run aice_animation.py". Note that this isn't an
			   encapsulated function but rather just a script, so
			   be careful with existing variable names.

circumpolar_plot.py: Generates a circumpolar Antarctic plot of the given
                     variable from ROMS. If the variable is depth-dependent,
		     you can choose to plot the surface level, the bottom
		     level, a specific depth in metres, the vertical average
		     throughout the entire water column, or the vertical
		     average between two specified depths in metres.
		     To run: Open python or ipython and type
		             "run circumpolar_plot.py". The script will
			     prompt you for paths to the ROMS grid file,
			     the ocean history or averages file, the variable
			     name, the timestep to plot, what to do about
			     depth (if the variable is depth-dependent),
			     optional bounds on the colour scale, and whether
			     to save the figure in a file or display it on the
			     screen. When the plot is complete, the script will
			     ask if you want to make another, and if so, what
			     changes you want to make to the parameters (eg
			     variable name). It will repeat as many times as you
			     want. This way you don't have to re-enter all the
			     parameters again if only one or two of them have
			     changed.

circumpolar_cice_plot.py: Generates a circumpolar Antarctic plot of the given
                          variable from CICE.
			  To run: Open python or ipython and type
			          "run circumpolar_plot.py". The interface is
				  similar to that of circumpolar_plot.py, but
				  since sea ice variables are not
				  depth-dependent, there is no need to enter
				  depth information.

h_circumpolar.py: Creates a circumpolar Antarctic plot of bathymetry. Follows
                  the same process as circumpolar_plot.py, but since h is not
		  time-dependent, it requires a special case.
		  To run: Open python or ipython and type
		          "run h_circumpolar.py". The script will prompt you
			  for paths to the ROMS grid file and the filename
			  to save the figure as.

ice2ocn_fwflux.py: Creates a circumpolar Antarctic plot of net CICE-to-ROMS
                   freshwater flux in cm/day. Follows the same process as
		   circumpolar_cice_plot.py, but the derived variable
		   (FW flux - salt flux, converted to cm/day) requires a
		   special case.
		   To run: Open python or ipython and type
		           "run ice2ocn_fwflux.py". The script will prompt
			   you for the path to the CICE history file, the
			   timestep to plot, and the filename to save the
			   figure as.

ini_sst_circumpolar.py: Creates a circumpolar Antarctic plot of initial
                        SST from the ROMS initialisation file. Follows the
			same process as circumpolar_plot.py, but since the
			initialisation file is set up differently to the
			ROMS history/averages files, it requires a special
			case.
			To run: Open python or ipython and type
			        "run ini_sst_circumpolar.py". The script
				will prompt you for paths to the ROMS
				grid file, the ROMS initialisation file,
				and the filename to save the figure as.

ini_sss_circumpolar.py: Like ini_sst_circumpolar.py, but for initial SSS.
                        To run: Open python or ipython and type
			        "run ini_sss_circumpolar.py". The script
				will prompt you for paths to the ROMS
				grid file, the ROMS initialisation file,
				and the filename to save the figure as.

zonal_plot.py: Creates a depth vs latitude plot of the given variable. You can
               choose to plot a single longitude slice, a zonal average over
	       all longitudes, or a zonal average between two specific
	       longitudes.
	       To run: Edit grid parameters near the top of the file, and the
	               value of "dlon" (regular longitude spacing for your
		       grid) in the function average_btw_lons. Then open
		       python or ipython and type "run zonal_plot.py". The
		       script will prompt you for paths to the ROMS grid file
		       and the ocean history or averages file, the name of the
		       variable to plot, the timestep number to plot, the type
		       of plot (single longitude, zonally averaged over all
		       longitudes, or zonally averaged between two specific
		       longitudes), the deepst depth to plot, optional bounds on
		       the colour scale, and whether to save the file (and if
		       so, the filename) or display it on the screen. As with
		       circumpolar_plot.py and circumpolar_cice_plot.py, the
		       interface will repeat as many times as you like, and you
		       only have to specify which parameters have changed since
		       the last plot.

uv_vectorplot.py: Make a circumpolar Antarctic plot of speed overlaid with
                  velocity vectors at the given depth (surface, bottom, or
		  vertically aveaged).
		  To run: Open python or ipython and type
		          "run uv_vectorplot.py". You will be prompted for the
			  path to the ROMS history/averages file; the timestep;
			  whether to plot the surface, bottom, or vertically
			  averaged velocities; and whether to save the figure
			  (and if so, what filename to save it under) or display
			  it on the screen. As with the other interactive
			  plotting scripts, the interface will repeat as many
			  times as you like, and you only have to specify which
			  parameters have changed since the last plot.

massloss_map.py: Make a map of unexplained percent error in annually averaged
                 simulated basal mass loss from each ice shelf that is over
		 5,000 km^2 in Rignot et al., 2013.
		 To run: First make sure your logfile from
		         timeseries_massloss.py is up to date, as this script
			 reads simulated basal mass loss timeseries from this
			 logfile. Then open python or ipython and type
			 "run massloss_map.py". The script will prompt you for
			 paths to the ROMS grid file and the mass loss logfile,
			 and whether to save the figure (and if so, what
			 filename) or display it on the screen.

ismr_map.py: Same as massloss_map.py, but for area-averaged melt rates rather
             than area-integrated mass loss.
	     To run: First make sure your logfile from timeseries_massloss.py
	             is up to date, as this script reads simulated basal mass
		     loss timeseries from this logfile. Then open python or
		     ipython and type "run ismr_map.py". The script will prompt
		     you for paths to the ROMS grid file and the mass loss
		     logfile, and whether to save the figure (and if so, what
		     filename) or display it on the screen.

nsidc_aice_monthly.py: Make a figure comparing sea ice concentration from NSIDC
                       (1995 data) and CICE (latest year of spinup under
		       repeated 1995 forcing), for the given month.
		       To run: First edit the variables nsidc_head,
		               nsidc_head_0, nsidc_head_1, and nsidc_tail (near
			       the top of the file) to suit the paths to NSIDC
			       output on your filesystem. Then open python or
			       ipython and type "run nsidc_aice_monthly.py". The
			       script will prompt you for the CICE output file,
			       the month to plot, and whether to save the figure
			       (and if so, what filename) or display it on the
			       screen. As with the other interactive plotting
			       scripts, the interface will repeat as many times
			       as you like, and you only have to specify which
			       parameters have changed since the last plot.

nsidc_aice_seasonal.py: Like nsidc_aice_monthly.py, but creates a 4x2 plot
                        comparing NSIDC and CICE sea ice concentration averaged
			over each season (DJF, MAM, JJA, SON).
			To run: First edit the variables nsidc_head,
			        nsidc_head_0, nsidc_head_1, and nsidc_tail (near
			        the top of the file) to suit the paths to NSIDC
			        output on your filesystem. Then open python or
			        ipython and type "run nsidc_aice_seasonal.py".
			        The script will prompt you for the CICE output
			        file and whether you want to save the figure
				(and if so, what filename) or display it on the
			        screen. This script does not repeat.

ismr_plot.py: Creates a circumpolar plot of ice shelf melt rates averaged over
              the last year of simulation.
	      To run: Open python or ipython and type "run ismr_plot.py". The
	              script will prompt you for the path to a ROMS output file
		      containing at least one year of 5-day averages, and
		      ask you whether you want to save the figure (and if so,
		      what filename) or display it on screen.

bwtemp_plot.py: Creates a circumpolar plot of bottom water temperature, averaged
                over the last year of simulation.
		To run: Open python or ipython and type "run bwtemp_plot.py".
		        The script will prompt you for the path to a ROMS
			output file containing at least one year of 5-day
			averages, and ask you whether you want to save the
			figure (and if so, what filename) or display it on
			screen.

bwsalt_plot.py: Creates a circumpolar plot of bottom water salinity, averaged
                over the last year of simulation.
		To run: Open python or ipython and type "run bwsalt_plot.py".
		        The script will prompt you for the path to a ROMS
			output file containing at least one year of 5-day
			averages, and ask you whether you want to save the
			figure (and if so, what filename) or display it on
			screen.

sose_roms_seasonal.py: Make a 4x2 plot compring lat vs. depth slices of
                       seasonally averaged temperature or salinity at the given
		       longitude, between ROMS (last year of simulation) and
		       SOSE (2005-2010 climatology).
		       To run: First make the sure the path to the SOSE seasonal
		               climatology file, stored in the variable
			       sose_file near the top of the main function, is
			       correct. (If you don't have this file ask Kaitlin
			       for it.) Then open python or ipython and type
		               "run sose_roms_seasonal.py". You will be prompted
			       for the path to the ROMS output file, whether to
			       plot temperature or salinity, the longitude
			       slice to plot, the deepest depth to plot, and
			       whether to save the figure (and if so, what
			       filename) or display it on screen. As with other
			       interactive plotting scripts, the interface will
			       repeat as many times as you want and only ask for
			       changes to the existing options.

zice_circumpolar.py: Creates a circumpolar Antarctic plot of ice shelf draft.
                     To run: Open python or ipython and type
		             "run zice_circumpolar.py". The script will prompt
			     you for the path to the ROMS grid file and the
			     filename to save the figure under.

grid_res.py: Make a circumpolar plot of the horizontal resolution of the ROMS
             grid (square root of the area of each cell).
	     To run: Open python or ipython and type "run grid_res.py". You will
	             be prompted for the ROMS grid file, and whether to save the
		     figure (and if so, what filename) or display it on the
		     screen.

mld_plot.py: Create a circumpolar Antarctic plot of mixed layer depth in ROMS.
             Follows the same process as circumpolar_plot.py, but masking out
	     the ice shelves requires a special case.
	     To run: Open python or ipython and type "mld_plot.py". You will
	             be prompted for the ROMS output file, the timestep to
		     plot, colour bounds (optional), whether to save the figure
		     (and if so, what filename) or display it on the screen.
		     This script is non-repeating.

make_zonal_slices.sh: Example of a bash script that calls sose_roms_seasonal.py
                      for both temperature and salinity at 10 degree increments
		      all along the Antarctic coastline.
		      To run: First edit the variable ROMS_FILE to point to the
		              ROMS output file you want plots for (it must
			      contain at least 1 year of 5-day averages).
			      Also change whatever other arguments you want
			      in the calls to sose_roms_seasonal, such as the
			      output file name or the maximum depth to plot.
			      Then just type "./make_zonal_slices.sh" in the
			      shell and it will go.

aice_hi_seasonal.py: Creates a 4x2 plot of seasonally averaged sea ice
                     concentration (top row) and thickness (bottom row) over
		     the last year of simulation.
		     To run: Open python or ipython and type
		             "run aice_hi_seasonal.py". The script will prompt
			     you for the CICE output file and whether you want
			     to save the figure (and if so, what filename) or
			     display it on the screen. This script does not
			     repeat.

freezingpt_slice.py: Plot the difference from the freezing temperature for a
                     single i-slice (depth versus y) with no time-averaging,
		     spatial averaging, or interpolation. This helps to show
		     where there is spurious supercooling.
		     To run: Open python or ipython and type
		             "run freezingpt_slice.py". The script will prompt
			     you for the path to the ROMS history file, the
			     timestep and i-index to plot, the deepest depth
			     to plot, optional bounds on the colour scale,
			     and if you want to save the figure (and if so,
			     what filename) or display it on the screen. This
			     script repeats as many times as you like.

i_slice.py: Plot the given variable for a single i-slice (depth versus y) with
            no time-averaging, spatial averaging, interpolation, or velocity
	    rotation. This helps to show where there are advective errors.
	    To run: Open python or ipython and type "run i_slice.py". The
	            script will prompt you for the path to the ROMS history
		    file, the variable name, the timestep and i-index to plot,
		    the deepest depth to plot, optional bounds on the colour
		    scale, and if you want to save the figure (and if so, what
		    filename) or display it on the screen. This script repeats
		    as many times as you like.

cice_vectorplot.py: For any vector in the CICE output (velocities, stresses,
                    etc.) make a circumpolar Antarctic plot of its magnitude,
		    overlaid with the vectors themselves.
		    To run: Open python or ipython and type
		            "run cice_vectorplot.py". The script will prompt you
			    for the path to the CICE history file, the timestep
			    to plot, the names of the vector components,
			    optional bounds on the colour scale for magnitude,
			    and if you want to save the figure (and if so, what
			    filename) or display it on the screen. This script
			    repeats as many times as you like.

effective_thickness.py: Make a circumpolar plot of effective sea ice thickness
                        (area*height).
			To run: Open python or ipython and type
			        "run effective_thickness.py". The script will
				prompt you for the path to the CICE history
				file, the timestep to plot, optional bounds on
				the colour scale, and if you want to save the
				figure (and if so, what filename) or display it
				on the screen. This script repeats as many
				times as you like.

temp_salt_seasonal.py: Make a 4x2 plot showing lat vs. depth slides of
                       seasonally averaged temperature (top) and salinity
		       (bottom) at the given longitude, over the last year of
		       simulation.
		       To run: Open python or ipython and type
		               "run temp_salt_seasonal.py". The script will
			       prompt you for paths to the ROMS output file,
			       the longitude to plot, the deepest depth to
			       plot, and whether you want to save the figure
			       (and if so, what filename) or display it on
			       the screen. This script repeats as many times
			       as you like.

ssflux_tamura_monthly.py: Make a figure comparing monthly-averaged sea ice
                          to ocean salt fluxes, from Tamura's dataset to CICE
			  output.
			  To run: First make sure the paths to monthly-averaged,
			          unit-corrected (to kg/m^2/s) Tamura data files
				  are correct. Then open python or ipython and
				  type "run ssflux_tamura_monthly.py". The
				  script will prompt you for paths to the CICE
				  output file, the month, and whether you want
				  to save the figure (and if so, what filename)
				  or display it on the screen. This script
				  repeats as many times as you like.

ssflux_tamura_seasonal.py: Make a figure comparing seasonally-averaged sea ice
                           to ocean salt fluxes, from Tamura's dataset to CICE
			   output.
			   To run: First make sure the paths to
			           monthly-averaged, unit-corrected (to
				   kg/m^2/s) Tamura data files are correct. Then
				   open python or iptyhon and type
				   "run ssflux_tamura_seasonal.py". The script
				   will prompt you for paths to the CICE output
				   file and whether you want to save the figure
				   (and if so, what filename) or display it on
				   the screen. This script is non-repeating.

ssflux_tamura_annual.py: Make a figure comparing annually-averaged sea ice to
                         ocean salt fluxes, from Tamura's dataset to CICE
			 output.
			 To run: First make sure the paths to monthly-averaged,
			         unit-corrected (to kg/m^2/s) Tamura data files
				 are correct. Then make sure you have an
				 annually averaged CICE file. Then open python
				 or ipython and type
				 "run ssflux_tamura_annual.py". The script will
				 prompt you for the path to this CICE file, the
				 year it corresponds to, and whether you want
				 to save the figure (and if so, what filename)
				 or display it on the screen. This script
				 is non-repeating.

sose_seasonal.py: Make a 4x2 plot showing lat vs. depth slices of seasonally
                  averaged temperature (top) and salinity (bottom) at the given
		  longitude, for the 2005-2010 SOSE climatology.
		  To run: First make sure the path to the SOSE seasonal
		          climatology file is correct (if you don't have this
			  file, ask Kaitlin). Then open python or ipython and
			  type "run sose_seasonal.py". The script will
			  prompt you for the longitude to interpolate to, the
			  deepest depth to plot, and whether to save the
			  figure (and if so, what filename) or display it on
			  the screen. This script is non-repeating.

ice_drift_seasonal.py: Create a 2x2 plot replicating Figure 1 of Holland &
                       Kimura 2016, showing sea ice velocity vectors overlaying
		       sea ice concentration for the seasonal averages FMA, MMJ,
		       ASO, NDJ.
		       To run: Open python or ipython and type
		               "run ice_drift_seasonal.py". The script will
			       prompt you for the path to a CICE output file
			       containing 5-day averages for at least one
			       complete Feb-Jan period. It will also ask whether
			       you want to save the figure (and if so, what
			       filename) or display it on the screen. This
			       script is non-repeating.

seaice_budget.py: Create four plots showing timeseries of the thermodynamic vs
                  dynamic volume tendency, averaged over (1) the continental
		  shelf (defined as anywhere south of 60S with seafloor
		  shallower than 1500 m), and (2) the offshore region
		  (everywhere else). Two plots are the absolute volume
		  tendencies (units of cm/day), the other two are cumulative
		  over the simulation (cm).
		  To run: Open python or ipython and type
		          "run seaice_budget.py." The script will prompt you for
			  the path to the CICE output file, the path to the ROMS
			  grid file, and whether you want to save the figures
			  (and if so, what filenames) or display them on the
			  screen.

seaice_budget_thermo.py: Create four plots showing timeseries of the
                         thermodynamic terms of sea ice growth and melt:
			 congelation, frazil ice formation, snow-to-ice
			 flooding, top melt, basal melt, and lateral melt.
			 These variables are averaged over (1) the continental
			 shelf (defined as anywhere south of 60S with seafloor
			 shallower than 1500 m), and (2) the offshore region
			 (everywhere else). Two plots are the absolute volume
			 tendencies (units of cm/day), the other two are
			 cumulative over the simulation (cm).
			 To run: Open python or ipython and type
			         "run seaice_budget_thermo.py". The script will
				 prompt you for the path to the CICE output
				 file, the path to the ROMS grid file, and
				 whether you want to save the figures (and if
				 so, what filenames) or display them on the
				 screen.

compare_nic_seasonal.py: Make a 4x2 plot comparing seasonal averages of the
                         given variable from my implementation of CICE in
			 MetROMS (bottom) and Nic Hannah's implementation
			 coupled to MOM (top).
			 To run: Open python or ipython and type
			         "run compare_nic_seasonal.py". The script will
				 prompt you for the path to the CICE-MetROMS
				 output file, the variable name to plot,
				 optional colour bounds, and whether you want
				 to save the figure (and if so, what filename)
				 or display it on the screen. The script will
				 repeat as many times as you like.

era_gpcp.py: Plot precipitation (1992-2005 average) in the ERA-Interim versus
             GPCP datasets over the Southern Ocean.
	     To run: First make sure the ERA-Interim and GPCP paths near the top
	             of the file are correct. Then open python or ipython and
		     type "run era_gpcp.py". The figure will be saved under
		     the filename "era_gpcp.png".

evap_era_monthly.py: Plot monthly-averaged evaporation as calculated by MetROMS
                     (ROMS and CICE calculate separately, so merge them based
		     on sea ice concentration) and compare it to ERA-Interim.
		     To run: First make sure the ERA-Interim paths near the top
		             of the file are correct. Then open python or
			     ipython and type "run evap_era_monthly.py". The
			     script will prompt you for paths to the ROMS and
			     CICE output files (5-day averages for the same
			     timesteps; if multiple instances of the given month
			     are present the script will select the last one),
			     the month to plot, optional colour bounds, and
			     whether you want to save the figure (and if so,
			     what filename) or display it on the screen. The
			     script will repeat as many times as you like.

holland_fig1.py: Recreate Figure 1 of Holland et al 2014
                 (doi:10.1175/JCLI-D-13-00301.1) using ROMS output: annually
		 averaged barotropic streamfunction, JJA mean mixed-layer depth
		 (just plot the KPP boundary layer depth for now), annually
		 averaged bottom water temperature and salinity.
		 To run: Open python or ipython and type "run holland_fig1.py".
		         The script will prompt you for the path to the ROMS
			 grid file, and the ROMS output file containing exactly
			 1 year of 5-day averages including a continuous
			 June-August period. The figure will be displayed on
			 the screen.

temp_salt_slice.py: Create a 2x1 plot showing zonal slices (depth vs latitude)
                    of temperature and salinity interpolated to the given
		    longitude, at the given timestep.
		    To run: Open python or ipython and type
		            "run temp_salt_slice.py". The script will prompt you
			    for the path to the ROMS averages file, the timestep
			    to plot, the longitude to interpolate to, the
			    deepest depth to plot, and whether you want to save
			    the figure (and if so, what filename) or display it
			    on the screen. This script repeats as many times
			    as you want.			    

timeseries_seaice_extent.py: Calculate and plot timeseries of sea ice extent
                             (area of ice with concentration >= 15%) during a
			     ROMS-CICE simulation.
			     To run: Open python or ipython and type
		                     "run timeseries_seaice_extent.py". The
				     script will prompt you for the paths to
				     the CICE history file and the log file.

timeseries_massloss_depth.py: Plot timeseries of total basal mass loss and
                              area-averaged ice shelf melt rates split up into
			      3 different depth classes for the ice shelf draft.
			      To run: Open python or ipython, and type
			              "run timeseries_massloss_depth.py". The
				      script will prompt you for the paths to
				      the ocean history or averages file and
				      the log file.


***FIGURES FOR ADVECTION PAPER***

adv_amery_tsplots.py: Create a 2x2 plot showing zonal slices of temperature and
                      salinity through 71E (Amery Ice Shelf) at the end of the
		      U3_LIM and C4_LD simulations.
		      To run: Make sure the paths to the simulation directories
		              and 31 December ROMS files are correct. Then
			      open python or ipython and type
			      "run adv_amery_tsplots.py". The figure will be
			      saved under the filename adv_amery_tsplots.png.

adv_ross_tsplots.py: Same as adv_amery_tsplots.py, but for the Ross Sea (180E).
                     To run: Make sure the paths to the simulation directories
		             and 31 December ROMS files are correct. Then open
			     python or ipython and type
			     "run adv_ross_tsplots.py". The figure will be
			     saved under the filename adv_ross_tsplots.png.

adv_freezingpt_slice.py: Plot the difference from the freezing temperature at
                         a specific timestep through the Weddell Sea in the
			 worst-performing advection experiment. There is no
			 time-averaging, spatial averaging, or interpolation.
			 This shows off the spurious supercooling. It is
			 really just a special case of freezingpt_slice.py.
			 To run: Make sure the file_path is correct. Then open
			         python or ipython and type
				 "run adv_freezingpt_slice.py". The figure will
				 be saved under the filename
				 adv_freezingpt_slice.png.

adv_timeseries_volume.py: Plot timeseries of total sea ice volume for all the
                          advection experiments. Before running this script,
			  you must run timeseries_seaice for each experiment.
			  To run: Make sure the paths to directories and the
			          sea ice logfiles are correct. Then open
				  python or ipython and type
				  "run adv_timeseries_volume.py". The figure
				  will be saved under the filename
				  adv_timeseries_volume.png.

adv_frazil.py: Create a 3x2 plot of annually averaged frazil formation for each
               advection experiment: the absolute values for U3_LIM, and the
	       anomalies from U3_LIM for the other 5 experiments.
	       To run: Make sure the paths to the simulation directories and
	               annually averaged CICE files are correct. Then open
		       python or ipython and type "run adv_frazil.py". The
		       figure will be saved under the filename adv_frazil.png.

adv_thickness.py: Like adv_frazil.py, but for sea ice effective thickness on
                  23 August (the sea ice area max).
		  To run: Make sure the paths to the simulation directories and
	                  23 August CICE files are correct. Then open python or
			  ipython and type "run adv_thickness.py". The figure
			  will be saved under the filename adv_thickness.png.

adv_sss.py: Like adv_thickness.py, but for sea surface salinity.
            To run: Make sure the paths to the simulation directories and 23
	            August CICE files are correct. Then open python or ipython
		    and type "run adv_sss.py". The figure will be saved under
		    the filename adv_sss.png.

adv_mld.py: Like adv_thickness.py, but for mixed layer depth as calculated by
            the KPP parameterisation.
	    To run: Make sure the paths to the simulation directories and 23
	            August ROMS files are correct. Then open python or ipython
		    and type "run adv_mld.py". The figure will be saved under
		    the filename adv_mld.png.

adv_polynyas.py: Create a 1x2 plot of sea ice concentration near the Amery Ice
                 Shelf on 23 August (the sea ice area max), showing the
		 difference in polynya size between the U3_LIM and C4_LD
		 simulations.
		 To run: Make sure the paths to the simulation directories and
		         23 August CICE files are correct. Then open python or
			 ipython and type "run adv_polynyas.py". The figure
			 will be saved under the filename adv_polynyas.png.

adv_u3_sss_anom.py: Plot the sea surface salinity anomaly between the U3 and
                    U3_LIM simulations on 23 August (sea ice area maximum).
		    To run: Make sure the paths to the simulation directories
		            and 23 August CICE files are correct. Then open
			    python or ipython and type "run adv_u3_sss_anom.py".
			    The figure will be saved under the filename
			    sss_u3_anom.png.

adv_mld_2.py: Like adv_mld.py, but only showing U3_LIM and C4_LD.
              To run: Make sure the paths to the simulation directories and 23
	              August ROMS files are correct. Then open python or ipython
		      and type "run adv_mld_2.py". The figure will be saved
		      under the filename adv_mld_2.png.

adv_thickness_2.py: Like adv_thickness.py, but only showing U3_LIM and C4_LD.
                    To run: Make sure the paths to the simulation directories
		            and 23 August ROMS files are correct. Then open
			    python or ipython and type "run adv_thickness_2.py".
			    The figure will be saved under the filename
			    adv_thickness_2.png.


***FIGURES FOR GARY'S LIMITERS PAPER***

gadv_freezingpt_slice.py: As adv_freezingpt_slice.py, but for the U3 experiment
                          through a different slice (through 8E) and timestep.
			  To run: Make sure the path to the ocean history file
			          is correct. Then open python or ipython and
				  type "run gadv_freezingpt_slice.py". The
				  figure will be saved with the filename
				  "kn_fig1.png".

gadv_frazil_thickness.py: Plot anomalies between the U3 and U3_LIM simulations
                          in 2 circumpolar plots. On the left, annually
			  averaged frazil formation (as in adv_frazil.py). On
			  the right, effective sea ice thickness on 23 August
			  (sea ice area max).
			  To run: Make sure the paths to the simulation
			          directories near the top of the file are
				  correct. Then open python or ipython and type
				  "run gadv_frazil_thickness.py". The figure
				  will be saved with the filename "kn_fig2.png".

gadv_frazil_bathy.py: Plot a section of the coastline from 25-45E. On the left,
                      show anomalies in annually averaged frazil formation
		      between the U3 and U3_LIM simulations. On the right, show
		      bathymetry. This way the relationship between spurious
		      supercooling and steep bathymetry is obvious.
		      To run: Make sure the paths to the simulation directories
		              and ROMS grid file near the top of the file are
			      correct. Then open python or ipython and type
			      "run gadv_frazil_bathy.py". The figure will be
			      saved with the filename "kn_fig3.png".


***FIGURES FOR FESOM INTERCOMPARISON***

mip_grid_res.py: Make a 3x1 plot showing horizontal grid resolution (square
                 root of the area of each rectanuglar grid cell or triangular
		 element) in MetROMS, FESOM low-res, and FESOM high-res, zoomed
		 into the Antarctic continental shelf.
		 To run: First clone my "fesomtools" GitHub repository and
		         replace '/short/y99/kaa561/fesomtools' (near the top
			 of the file) with the path to the cloned repository
			 on your system. Then open python or ipython and type
			 "run mip_grid_res.py". The script will prompt you for
			 the path to the ROMS grid file and FESOM mesh
			 directories, and whether you want to save the figure
			 (and if so, what filename) or display it on the screen.

mip_timeseries.py: Plot MetROMS and FESOM timeseries together, for Drake
                   Passage transport, total Antarctic sea ice area, volume, and
		   extent, and basal mass loss for major ice shelves. Include
		   the range of observations for Drake Passage transport and
		   ice shelf mass loss.
		   To run: First make sure you have run timeseries_dpt.py,
		           timeseries_seaice.py, timeseries_seaice_extent.py,
			   and timeseries_massloss.py and saved the logfiles in
			   a single directory with the names dpt.log,
			   seaice.log, seaice_extent.log, and massloss.log. Do
			   the same for FESOM with the equivalent fesomtools
			   scripts, with the same names. Then open python or
			   ipython and type "run mip_timeseries.py". The script
			   will prompt you for the paths to the ROMS and FESOM
			   logfile directories, and whether you want to plot
			   the full timeseries or annual averages (in which case
			   sea ice area, volume, and extent will not be
			   plotted). The script will create a bunch of png
			   files.

mip_massloss_error_map.py: Make a 3x1 circumpolar Antarctic map of percentage
                           error in mass loss for each ice shelf, outside the
			   bounds given by Rignot et al. (2013), in MetROMS,
			   FESOM low-res, and FESOM high-res, for the 2003-2008
			   average. Also print the values to the screen.
			   To run: First make sure you have run
			           timeseries_massloss.py for ROMS through to
				   at least the end of 2008, and the equivalent
				   timeseries_massloss.py in the "fesomtools"
				   repository for each FESOM simulation. Then
				   open python or ipython and type
				   "run mip_massloss_error_map.py". The script
				   will prompt you for the path to the ROMS
				   grid file, the ROMS and FESOM massloss
				   logfiles, and whether you want to save the
				   figure (and if so, what filename) or display
				   it on the screen.

mip_massloss_difference_map.py: Make a circumpolar Antarctic figure showing the
                                percentage change in mass loss for each ice
				shelf in the high-resolution FESOM simulation
				with respect to the low-resolution FESOM
				simulation, discarding the first 10 years (i.e.
				2002-2016 average). Also print the values to
				the screen.
				To run: First make sure you have run
			                timeseries_massloss.py in the
					"fesomtools" repository for each FESOM
					simulation. Then open python or ipython
					and type
					"run mip_massloss_error_map.py".
					The script will prompt you for the path
					to the ROMS grid file, the FESOM
					massloss logfiles, and whether you want
					to save the figure (and if so, what
					filename) or display it on the screen.

mip_cavity_fields.py: For each major ice shelf, make a 2x1 plot of the given
                      field for MetROMS (left) and FESOM (right), zoomed into
		      that region. Current options are ice shelf draft, ice
		      shelf melt rate, bottom water temperature, bottom water
		      salinity, surface velocity (with overlaid vectors), or
		      vertically averaged velocity (with overlaid vectors).
		      To run: First clone my "fesomtools" GitHub repository and
		              replace '/short/y99/kaa561/fesomtools' (near the
			      top of the file) with the path to the cloned
			      repository on your system. Next, for all options
			      except the ice shelf draft, you will need to make
			      time-averaged files of ROMS and FESOM output, over
			      whatever time period you like (I chose 2002-2016)
			      The ROMS file must also contain the mask_rho and
			      zice fields. You can make these using NCO, using
			      melt rate as an example: for ROMS,
			      ncra -v m,mask_rho,zice <input_files> roms_out.nc
			      and for FESOM,
			      ncra -v wnet <input_files> fesom_out.nc
			      For bottom water temperature, replace "m" and
			      "wnet" with "temp". For bottom water salinity,
			      replace with "salt". For surface velocity,
			      replace with "u,v" as both components of velocity
			      are needed. Once the files are ready, open python
			      or ipython and type "run mip_cavity_fields.py".
			      The script will ask you what variable you want to
			      plot, and then prompt you for the paths to the
			      ROMS grid file (for ice shelf draft) or ROMS and
			      FESOM time-averaged files (for everything else),
			      and the FESOM mesh directory. It will output one
			      png for each ice shelf.

mip_hi_seasonal.py: Make a 4x2 plot showing seasonal averages of sea ice
                    effective thickness (concentration*height), comparing
		    MetROMS (top) and FESOM (bottom).
		    To run: First clone my "fesomtools" GitHub repository and
			    replace '/short/y99/kaa561/fesomtools' (near the
			    top of the file) with the path to the cloned
			    repository on your system. Next, make seasonal
			    climatologies of sea ice concentration and
			    thickness for both MetROMS and FESOM during the
			    entire simulation, using
			    seasonal_climatology_cice.py (in roms_tools) and
			    seasonal_climatology.py (in fesomtools). Once the
			    files are ready, open python or ipython and type
			    "run mip_aice_hi_seasonal.py". The script will
			    prompt you for paths to these files as well as the
			    FESOM mesh directory. It will output a png file.

mip_aice_minmax_nsidc.py: Make a 4x2 plot showing February (top) and September
                          (bottom) sea ice concentration (1992-2015 average) for
			  NSIDC, MetROMS, and FESOM. The fourth column shows
			  timeseries of February and September sea ice extent
			  for NSIDC, MetROMS, and FESOM.
			  To run: First clone my "fesomtools" GitHub repository
			          and replace '/short/y99/kaa561/fesomtools'
				  (near the top of the file) with the path to
				  the cloned repository on your system. Make
				  sure timeseries_seaice_exent.py, in both
				  roms_tools and fesomtools, has been run for
				  the MetROMS and FESOM simulations. Next,
				  download the NSIDC Climate Data Record monthly
				  averages of Southern Hemisphere sea ice
				  concentration, and the NSIDC Sea Ice Index
				  csv files with total Antarctic sea ice extent
				  for each year, in February and September.
				  Make sure the variables nsidc_* near the top
				  of the file will reconstruct the right
				  filenames on your system. Then open python or
				  ipython and type
				  "run mip_aice_minmax_nsidc.py". The script
				  will prompt you for paths to the CICE file
				  containing 5-day averages for the entire
				  simulation, the CICE logfile for
				  timeseries_seaice_extent.py, the FESOM mesh
				  directory, the FESOM output directory
				  containing one ice.mean.nc file (5-day
				  averages) for each year, and the FESOM
				  logfile for timeseries_seaice_extent.py in
				  fesomtools. It will output a png file.

mip_zonal_cavity_ts.py: Create one 2x2 plot for each major ice shelf: zonal
                        slices of temperature (top) and salinity (bottom),
			comparing MetROMS (left) and FESOM (right). Longitudes
			to slice through, and latitude bounds, are
			pre-determined.
			To run: First clone my "fesomtools" GitHub repository
			        and replace '/short/y99/kaa561/fesomtools'
			        (near the top of the file) with the path to the
				cloned repository on your system. Next,
				for both ROMS and FESOM, make a new NetCDF file
				containing 3D temperature and salinity averaged
				over whatever time period you want (I went for
				2002-2015). Then open python or ipython and
				type "run mip_zonal_cavity_ts.py". The script
				will prompt you for the paths to these
				time-averaged files as well as the ROMS grid
				file and the FESOM mesh directory. It will
				output one png for each ice shelf.

mip_mld.py: Make a 4x2 plot showing summer (DJF) and winter (JJA) mixed layer
            depth (defined as in Sallee et al 2013: depth at which potential
	    density is 0.03 kg/m^3 higher than at the surface) comparing
	    MetROMS (top) and FESOM (bottom) where each plot is shown zoomed
	    out to include the whole ACC, and zoomed in to the continental
	    shelf.
	    To run: First clone my "fesomtools" GitHub repository and replace
	            '/short/y99/kaa561/fesomtools' (near the top of the file)
		    with the path to the cloned repository on your system.
		    Next, make seasonal climatologies of 3D temperature and
		    salinity for both MetROMS and FESOM during the entire
		    simulation, using seasonal_climatology_roms.py (in
		    roms_tools) and seasonal_climatology.py (in fesomtools).
		    Once the files are ready, open python or ipython and type
		    "run mip_mld.py". The script will prompt you for paths to
		    these files as well as the ROMS grid file and the FESOM
		    mesh directory. It will output a png file.

mip_dpt_calc.py: Calculate the mean Drake Passage transport over 2002-2016, as
                 well as the linear trend, for MetROMS, low-res FESOM, and
		 high-res FESOM. Print the results to the screen.
		 To run: First run timeseries_dpt.py for MetROMS, and the
		         equivalent script timeseries_dpt.py in the fesomtools
			 repository for both FESOM simulations. Then open
			 python or ipython and type "run mip_dpt_calc.py". The
			 script will prompt you for the paths to the 3 log
			 files.

mip_ts_distribution.py: Make a 2x1 plot of T/S distributions south of 65S,
                        colour-coded based on depth, in MetROMS (left) and
			FESOM (right). Include the surface freezing point and
			density contours.
			To run: First clone my "fesomtools" GitHub repository
			        and replace '/short/y99/kaa561/fesomtools'
				(near the top of the file) with the path to the
				cloned repository on your system. Next, make
				time-averaged files of temperature and salinity
				for each model over the same period (I used
				2002-2016). Then open python or ipython and
				type "run mip_ts_distribution.py". The script
				will prompt you for the paths to the ROMS grid
				file, the ROMS time-averaged file, the FESOM
				mesh directory, and the FESOM time-averaged
				file. It will output a png.

mip_drift_slices.py: Make a 3x2 plot of temperature (left) and salinity (right)
                     through 0E. The top row is the initial conditions from
		     ECCO2. The middle and bottom rows are the end of the
		     simulation (last 5 day average) from MetROMS and FESOM
		     respectively.
		     To run: First clone my "fesomtools" GitHub repository and
		             replace '/short/y99/kaa561/fesomtools' (near the
			     top of the file) with the path to the cloned
			     repository on your system. Also make sure the
			     paths to the original ECCO2 files (ecco_temp_file,
			     ecco_salt_file) are correct. Then open python or
			     ipython and type "run mip_drift_slices.py". The
			     script will prompt you for the paths to the ROMS
			     grid file, the last ocean_avg file output by ROMS,
			     the FESOM mesh directory, and the last oce.mean
			     file output by FESOM. It will output a png.

mip_calc_massloss.py: Calculate the average mass loss for each ice shelf over
                      2002-2016 for MetROMS, FESOM low-res, and FESOM high-res.
		      Print to the screen along with Rignot's estimates for
		      2003-2008.
		      To run: First make sure you have run
		              timeseries_massloss.py for the MetROMS simulation,
			      as well as the equivalent timeseries_massloss.py
			      in the fesomtools repository for both FESOM
			      simulations. Then open python or ipython and type
			      "run mip_calc_massloss.py". The script will
			      prompt you for the paths to the three logfiles.

mip_regions_1var.py: For each of the 8 ice shelf regions analysed in this
                     intercomparison paper, make one 3x1 figure for 5 different
		     variables (ice shelf draft, ice shelf melt rate, bottom
		     water temperature, bottom water salinity, vertically
		     averaged velocity) where each variable is averaged over
		     the years 2002-2016 and zoomed into the region of interest.
		     The 3 parts of each figure are MetROMS, FESOM low-res, and
		     FESOM high-res. The velocity figures show absolute value
		     (speed) in colours, and direction with vector arrows.
		     To run: First clone my "fesomtools" GitHub repository and
		             replace '/short/y99/kaa561/fesomtools' (near the
			     top of the file) with the path to the cloned
			     repository on your system. Also make sure the
			     paths to the ROMS and FESOM files near the top of
		             the script are correct. Then open python or ipython
			     and type "run mip_regions_1var.py". The script
			     will output a bunch of pngs.

mip_iceshelf_figures.py: This is the giant monster script to generate 8
                         multi-part figures showing ice shelf processes in the
			 8 regions defined in the intercomparison paper. Each
			 figure is size Nx3 where N=3,4,5 is the number of
			 variables shown (current options are ice shelf melt
			 rate, ice shelf draft, bottom water temperature or
			 salinity, vertically averaged velocity, zonal slices
			 of temperature and salinity) and 3 is the number of
			 models (MetROMS, low-res FESOM, high-res FESOM). All
			 variables are averaged over the period 2002-2016, i.e.
			 the first 10 years of the simulation are discarded as
			 spinup, and seasonal cycles and interannual
			 variability are not considered.
			 In order to avoid unnecessarily repetitive code, this
			 script contains multiple functions which accept
			 location bounds as arguments (eg to calculate min/max
			 over the given region, to plot ice shelf draft over
			 the given region for each model, etc.) but in order to
			 prevent the function argument lists from getting out
			 of control, most of the variables are global and so
			 the majority of this script is not wrapped within a
			 function. Be very careful if you are running this
			 script in an active python session to make sure there
			 are no conflicting variable names previously defined.
			 To run: First clone my "fesomtools" GitHub repository
			         and replace '/short/y99/kaa561/fesomtools'
				 (near the top of the file) with the path to
				 the cloned repository on your system. Also
				 make sure the paths to the ROMS and FESOM
				 files near the top of the script are correct.
				 To use the predetermined regions and variable
			         combinations, simply open python or ipython
				 and type "run mip_iceshelf_figures.py". The
				 script will output a bunch of pngs. To modify
				 for other regions or variable combinations,
				 scroll down to "USER MODIFIED SECTION" to see
				 examples of how to call the functions to
				 create multi-part figures. You will have to
				 fiddle around with the x and y bounds,
				 GridSpec arguments, colourbar axes, etc. so
				 that the positioning looks okay.

mip_seasonal_cycle.py: Calculate the average amplitude of the seasonal cycle in
                       total basal mass loss over 2002-2016, in MetROMS, low-res
		       FESOM, and high-res FESOM. Print results to the screen.
		       To run: First make sure you have run
		               timeseries_massloss.py for the entire MetROMS
			       simulation, and the equivalent fesomtools
			       script for both FESOM simulations. Then open
			       python or ipython and type
		               "run mip_seasonal_cycle.py". The script will
			       prompt you for the paths to the
			       timeseries_massloss logfiles for each simulation.


***UTILITY FUNCTIONS***

calc_z.py: Given ROMS grid variables, calculate the s-coordinates, stretching
           curves, and z-coordinates. Assumes Vtransform=2 and Vstretching=2.
	   To run: This is a function designed to be called from other
	           scripts. See for example romscice_nbc.py.

cartesian_grid_2d.py: Given ROMS grid variables, calculate 2D Cartesian
                      integrands dx and dy.
		      To run: This is a function designed to be called from
		              other scripts. See for example
			      timeseries_massloss.py

cartesian_grid_3d.py: Given ROMS grid variables, calculate 3D Cartesian
                      integrands dx, dy, and dz, as well as 3D z-coordinates.
		      To run: This is a function designed to be called from
		              other scripts. See for example spinup_plots.py.

rotate_vector_cice.py: Given a 2D vector in x-y space on the CICE grid, rotate
                       it to lon-lat space.
		       To run: This is a function designed to be called from
		               other scripts. See for example
			       circumpolar_cice_plot.py.

rotate_vector_roms.py: Given a 2D vector in x-y space on the ROMS grid
                       (x-component on the u-grid, y-component on the v-grid),
		       interpolate them both to the rho-grid and rotate the
		       vector to lon-lat space.
		       To run: This is a function designed to be called from
		               other scripts. See for example
			       circumpolar_plot.py.

unesco.py: Calculates the UNESCO seawater equation of state (1980): given
           temperature, salinity, and pressure (depth/10 is fine), returns
	   density.
	   To run: The function unesco is designed to be called by another
	           script. See make_density_file.py for an example.

interp_era2roms.py: Given an array on the ERA-Interim grid, interpolate any
                    missing values, and then interpolate to the ROMS grid.
		    To run: The function interp_era2roms is designed to be
		            called by another script. See
			    romscice_atm_subdaily.py for an example.

interp_lon_roms.py: Linearly interpolate ROMS data, z, and latitude to the
                    specified longitude.
		    To run: The function interp_lon_roms is designed to be
		            called by another script. See zonal_plot.py for
			    an example.

interp_lon_sose.py: Linearly interpolate SOSE data to the specified longitude.
                    To run: The function interp_lon_sose is designed to be
		            called by another script. See sose_roms_seasonal.py
			    for an example.

monthly_avg_cice.py: Average the given variable in the given CICE file over the
                     given month.
		     To run: The function monthly_avg_cice is designed to be
		             called by another script. See nsidc_aice_monthly.py
			     for an example.

monthly_avg_roms.py: Average the given variable in the given ROMS file over the
                     given month.
		     To run: The function monthly_avg_roms is designed to be
		             called by another script. See common_grid.py
			     for an example.

seasonal_avg_cice.py: Calculate seasonal averages (DJF, MAM, JJA, SON) of the
                      given variable in the given CICE file.
		      To run: The function seasonal_avg_cice is designed to be
		              called by another script. See aice_hi_seasonal.py
			      for an example.

seasonal_avg_roms.py: Calculate seasonal averages (DJF, MAM, JJA, SON) of the
                      given variable in the given ROMS file.
		      To run: The function seasonal_avg_roms is designed to be
		              called by another script. See
			      temp_salt_seasonal.py for an example.







               




