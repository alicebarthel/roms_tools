***GENERATING INPUT FILES***

cice_grid.py: Given a ROMS grid file, create corresponding CICE grid and kmt
              (land mask) files.
	      To run: Open python or ipython, and type "run cice_grid.py." The
	              script will prompt you for paths to the existing ROMS
		      grid file and the desired CICE grid and kmt files.

woa_netcdf.py: Converts World Ocean Atlas temperature and salinity data from
               text file (FESOM input format) to NetCDF.
	       To run: First edit user parameters (file paths) near the top of
	               the file. Then open python/ipython and type "run
		       woa_netcdf.py".

romscice_ini_woa.py: Builds a ROMS initialisation file using World Ocean Atlas
                     data for temperature and salinity; starts with a motionless
		     ocean and zero sea surface height. Under ice shelves,
		     extrapolates temperature and salinity using
		     nearest-neighbour techniques. Uses WOA data assumed to be
		     converted from FESOM input using woa_netcdf.py.
		     To run: First edit user parameters (file paths and grid
		             parameters) near the bottom of the file (after the
			     Then make sure that you have scipy version 0.14 or
			     higher (on raijin, this  means switching to
			     python/2.7.6; instructions at the top of the file).
			     Then open python/ipython and type "run
			     romscice_ini_woa.py".

romscice_ini_ecco.py: Builds a ROMS initialisation file using ECCO2 data for
                      temperature and salinity; starts with a motionless ocean
		      and zero sea surface height. In ice shelf cavities,
		      temperature and salinity are linearly extrapolated
		      using nearest-neighbour as in romscice_ini_woa.py.
		      To run: First edit user parameters (file paths and grid
		              parameters) near the bottom of the file. Then make
			      sure that you have scipy version 0.14 or higher
			      (on raijin, this means switching to python/2.7.6;
			      instructions at the top of the file). Then open
			      python/ipython and type "run romscice_ini.py".

romscice_nbc.py: Builds a ROMS northern lateral boundary condition file from 1
                 year of monthly ECCO2 data for temperature, salinity, and
		 meridional velocity (set zonal velocity and sea surface height
		 to zero). Also contains useful code for calculating volume
		 averages.
		 To run: Edit user parameters near the top of the script
		         (mainly just file paths). Then make sure that you have
			 scipy version 0.14 or higher (on raijin, this means
			 switching to python/2.7.6; instructions at the top
			 of the file). Then open python or ipython and type
			 "run romscice_nbc.py".

convert_era.job: A self-submitting batch job which converts 1 year of
                 ERA-Interim sub-daily data into a ROMS-CICE forcing file,
		 in chunks of 100 6-hour timesteps at once (otherwise the python
		 memory overflows because this is a LOT of data). Depends on
		 roms_cice_atm_subdaily.py.
		 To run: First edit user parameters in romscice_atm_subdaily.py
		         (see below). Then edit the PBS job settings at the top
			 of this file. Then, to get the batch jobs started for
			 a given year (say 1992), type
			 qsub -v YEAR=1992,COUNT=0 convert_era.job
			 You can also submit multiple years quickly with a bash
			 loop:
			 for i in `seq 1992 2009`;
			 do
			     qsub -v YEAR=$i,COUNT=0 convert_era.job
			 done

romscice_atm_subdaily.py: Convert 100 6-hour timesteps of an ERA-Interim
                          atmospheric forcing file (plus 50 12-hour timesteps
			  of ERA-Interim precipitation) to a ROMS-CICE forcing
			  file. Rotate the winds to local x-y space for ROMS
			  grid.
			  To run: Edit user parameters near the top of the
			          script (mainly just file paths). This script
				  is designed to be called by a self-submitting
				  batch job, e.g. convert_era.job.

fill_clouds.py: The ERA-Interim dataset for 6-hour total cloud cover has some
                missing timesteps. This script interpolates the missing
		timesteps in a given file based on existing timesteps in that
		file, at the same time of day and a similar time of year.
		To run: Open python or ipython, and type "from fill_clouds
		        import *", then "fix_file('filename')" where filename
			is the path to the ERA-Interim file that has missing
			timesteps. You can also easily call it in a loop, e.g.
			for year in range(1992, 2009+1):
			    fix_file('../data/ERA_Interim/AN_'+str(year)+'_unlim.nc')

romscice_atm_smooth.py: At the beginning of spinups, when the ocean is
                        initially motionless, ROMS can blow up easily if
			immediately forced with sub-daily atmospheric forcing
			due to the strong but transient storms. To counteract
			this problem, this script smooths the given forcing
			files using a simple moving average (currently 5 days,
			but can be easily changed).
			To run: Edit the user parameters near the bottom of the
			        file (paths to forcing files, variable names,
				interval to smooth over, etc) then open python
				or ipython and type "run
				roms_cice_atm_smooth.py".

romscice_atm_monthly.py: Convert ERA-Interim files of monthly averaged
                         atmospheric forcing to ROMS-CICE input forcing files
			 on the correct grid and with the correct units.
			 To run: Edit file paths near the top of the file and
			         start/end years near the bottom. Then open
				 python or ipython and type "run
				 romscice_atm_monthly.py".

romscice_nbc_rep.py: Given a ROMS lateral bounday condition file with one year
                     of monthly data, convert it to a file which can be used
		     repeatedly year after year (for eg spinup).
		     To run: Edit the user parameter (path to LBC file)
		             near the bottom of the file. Then open python or
			     ipython and type "run romscice_nbc_rep.py".

repeat_forcing.py: If you are spinning up ROMS-CICE-MCT using one repeating year
                   of daily- or sub-daily atmospheric forcing, the easiest
		   option is to have ROMS and CICE follow regular calendars
		   (1995, 1996, 1997, etc) and make 4 copies of this annually-
		   repeating file which the models will cycle through every
		   4 years. One of these years (depending on the start year)
		   must be a leap year. Once you have made four copies of the
		   one-year (non-leap-year) dataset, and named them with the
		   same naming convention (e.g. AN_yyyy_unlim.nc), this script
		   will 1) set the cycle_length attribute to 4 years in each
		   file; 2) alter the time axis of the latter 3 files so they
		   follow the first in sequence; and 3) interpolate data for
		   Feb 29th on the leap year, as the average of the Feb 28th and
		   March 1st records from the same time of day.
		   To run: Edit the user parameters near the bottom of the file
		           (paths to forcing files, years, variable names, etc)
			   then open python or ipython and type
			   "run repeat_forcing.py".

repeat_forcing_monthly.py: Same as repeat_forcing but for monthly forcing fields
                           rather than sub-daily. No interpolation is needed,
			   just modifying the time axis to put all data on the
			   15th of each month, with a cycle length of 4 years.
			   To run: Edit the user parameters near the bottom of
			           the file (paths to forcing files, years)
				   then open python or ipython and type
				   "run repeat_forcing_monthly.py".

romscice_nbc_zeta.py: Interpolate AVISO sea surface height climatology
                      (annual average) to the northern boundary of the ROMS
		      grid. Save to the existing lateral boundary condition
		      file, created using romscice_nbc.py.
		      To run: Edit file paths and boundary index near the top
		              of the file. Then make sure that you have scipy
			      version 0.14 or higher (on raijin, this means
			      switching to python/2.7.6; instructions at the
			      top of the file). Then open python or ipython
			      and type "run romscice_nbc_zeta.py". You will
			      be prompted for the path to the lateral
			      boundary condition file that you want to add
			      zeta to.

nbdry_grid_hack.py: Modify the ROMS grid so that the northernmost 15 rows
                    (about 3 degrees) have the same bathymetry, i.e. dh/dy=0,
		    on advice of Matt Mazloff.
		    To run: Open python or ipython and type
		            "run nbdry_grid_hack.py".

add_tide_period.py: Given a ROMS tide file with tidal potential amplitude and
                    phase angle (created using Kate's potential tide scripts),
		    add the tidal period in seconds for each component.
		    To run: First edit the variable "tide_file" to point to the
		            correct file to edit. Then open python or ipython
			    and type "run add_tide_period.py".

remove_cavities.py: Remove the ice shelf cavities from the given ROMS grid file
                    and fill them in with land. After you run this script, I
		    suggest you remove the variables "zice" and "mask_zice"
		    from the file using NCO, to avoid any confusion later.
		    To run: Open python or ipython and type
		            "run remove_cavities.py". You will be prompted for
			    the path to the ROMS grid file you wish to edit.

uvp_grid_fix.py: The Matlab scripts I use to generate the ROMS grid assume that
                 the u-grid, v-grid, and psi-grid points have the same locations
		 as the rho-grid, and they just chop off the last point in the
		 required dimension(s). This is not correct. This script fixes
		 that.
		 To run: Open python or ipython and type "run uvp_grid_fix.py".
		         You will be prompoted for the path to the ROMS grid
			 file you wish to edit.

iceberg_melt.py: Read Martin and Adcroft's monthly climatology of freshwater
                 fluxes from iceberg melt, interpolate to the ROMS grid, and
		 save as a forcing file.
		 To run: First make sure the paths to the input iceberg data
		         are correct. Then open python or ipython and type
			 "run iceberg_melt.py". The script will prompt you for
			 the filename of the output ROMS forcing file.


***POST-PROCESSING DIAGNOSTICS***

make_density_file.py: Given an ocean history or averages file with temperature
                      and salinity data, calculate density fields at each
		      timestep using the 1980 UENSCO seawater equation of
		      state. Save in a new file.
		      To run: Open python or ipython, and type
		              "run make_density_file.py". The script will
			      prompt you for the paths to the ROMS grid file,
			      the ocean history or averages file, and the
			      desired path to the new density file.

plot_kinetic_energy.py: Extracts the kinetic energy values written in the
                        ocean.log files (you can supply as many ocean.log files
			as you like, from e.g. a long run split into several
			simulations) and plots the timeseries.
			To run: Open python or ipython, and type "run
			        plot_kinetic_energy.py". The script will prompt
				you for the paths to as many sequential
				ocean.log files as you like, as well as the
				timestep length and the output frequency for
				ocean.log (INFOSTEP in Params.py if you are
				using ROMS-CICE-MCT).

plot_maxspeed.py: Extracts the maximum velocity values written in the ocean.log
                  files (you can supply as many ocean.log files as you like,
		  from e.g. a long run split into several simulations) and plots
		  the timeseries.
		  To run: Open python or ipython, and type "run
		          plot_maxspeed.py". The script will prompt you for the
			  paths to as many sequential ocean.log files as you
			  like, as well as the timestep length and the output
			  frequency for ocean.log (INFOSTEP in Params.py if you
			  are using ROMS-CICE-MCT).

plot_volume.py: Extracts the volume values written in the ocean.log files (you
                can supply as many ocean.log files as you like, from e.g. a
		long run split into several simulations), converts them into
		percent anomalies (with respect to the initial value), and
		plots the timeseries.
		To run: Open python or ipython, and type "run plot_volume.py".
		        The script will prompt you for the paths to as many
			sequential ocean.log files as you like, as well as the
			timestep length and the output frequency for ocean.log
			(INFOSTEP in Params.py if you are using ROMS-CICE-MCT).

max_vel.py: Calculate the maximum |u| and |v| at each timestep of the given
            ocean history (or averages) file, and plot the timeseries.
	    To run: Open python or ipython, and type "run max_vel.py". The
	            script will prompt you for the path to the ocean history
		    file.

avg_zeta.py: Calculate the area-averaged sea surface height at each timestep of
             the given ocean history (or averages) file, and plot the
	     timeseries. This script also contains useful code for calculating
	     area averages.
	     To run: Open python or ipython, and type "run avg_zeta.py". The
	             script will prompt you for paths to the ocean history
		     and ROMS grid files.

timeseries_seaice.py: Calculates and plots timeseries of total sea ice area and
                      volume during a ROMS-CICE simulation. Also writes the
		      timeseries to a log file so they don't have to be
		      recomputed if the run is extended; at the beginning of
		      this script, previous values will be read from the same
		      log file if it exists.
		      To run: Open python or ipython and type
		              "run timeseries_seaice.py". The script will
			      prompt you for the paths to the CICE history file
			      and the log file.			      

timeseries_massloss.py: Calculates and plots timeseries of basal mass loss and
                        area-averaged melt rates from major ice shelves and the
			entire continent during a ROMS simulation. Also writes
			the timeseries to a log file so they don't have to be
			recomputed if the run is extended; at the beginning of
			this script, previous values will be read from the same
			log file if it exists.
	                To run: Open python or ipython, and type
			        "run timeseries_massloss.py". The script will
				prompt you for the paths to the ocean history
				or averages file and the log file. If you are
				using ice shelf draft data from something other
				than RTopo 1.05 you might need to tweak the lat
				and lon limits.

timeseries_dpt.py: Calculates and plots timeseries of Drake Passage transport
                   during a ROMS simulation. Also writes the timeseries to a
		   log file so it doesn't have to be recomputed if the run is
		   extended; at the beginning of this script, previous values
		   will be read from the same log file if it exists.
		   To run: Open python or ipython and type
		           "run timeseries_dpt.py". The script will prompt you
			   for the paths to the ROMS grid file, the ocean
			   history or averages file, and the log file.

timeseries_3D.py: Calculates and plots timeseries of total ocean heat content,
                  average salinity, and total kinetic energy during a ROMS
		  simulation. Also writes the timeseries to a log file so they
		  don't have to be recomputed if the run is extended; at the
		  beginning of this script, previous values will be read from
		  the same log file if it exists.
		  To run: Open python or ipython and type
		          "run timeseries_3D.py". The script will prompt you
			  for the paths to the ROMS grid file, the ocean history
			  or averages file, and the log file.


***NICE FIGURES***

circumpolar_plot.py: Generates a circumpolar Antarctic plot of the given
                     variable from ROMS. If the variable is depth-dependent,
		     you can choose to plot the surface level, the bottom
		     level, a specific depth in metres, the vertical average
		     throughout the entire water column, or the vertical
		     average between two specified depths in metres.
		     To run: Open python or ipython and type
		             "run circumpolar_plot.py". The script will
			     prompt you for paths to the ROMS grid file,
			     the ocean history or averages file, the variable
			     name, the timestep to plot, what to do about
			     depth (if the variable is depth-dependent),
			     optional bounds on the colour scale, and whether
			     to save the figure in a file or display it on the
			     screen. When the plot is complete, the script will
			     ask if you want to make another, and if so, what
			     changes you want to make to the parameters (eg
			     variable name). It will repeat as many times as you
			     want. This way you don't have to re-enter all the
			     parameters again if only one or two of them have
			     changed.

circumpolar_cice_plot.py: Generates a circumpolar Antarctic plot of the given
                          variable from CICE.
			  To run: Open python or ipython and type
			          "run circumpolar_plot.py". The interface is
				  similar to that of circumpolar_plot.py, but
				  since sea ice variables are not
				  depth-dependent, there is no need to enter
				  depth information.

h_circumpolar.py: Creates a circumpolar Antarctic plot of bathymetry. Follows
                  the same process as circumpolar_plot.py, but since h is not
		  time-dependent, it requires a special case.
		  To run: Open python or ipython and type
		          "run h_circumpolar.py". The script will prompt you
			  for paths to the ROMS grid file and the filename
			  to save the figure as.

ice2ocn_fwflux.py: Creates a circumpolar Antarctic plot of net CICE-to-ROMS
                   freshwater flux in cm/day. Follows the same process as
		   circumpolar_cice_plot.py, but the derived variable
		   (FW flux - salt flux, converted to cm/day) requires a
		   special case.
		   To run: Open python or ipython and type
		           "run ice2ocn_fwflux.py". The script will prompt
			   you for the path to the CICE history file, the
			   timestep to plot, and the filename to save the
			   figure as.

ini_sst_circumpolar.py: Creates a circumpolar Antarctic plot of initial
                        SST from the ROMS initialisation file. Follows the
			same process as circumpolar_plot.py, but since the
			initialisation file is set up differently to the
			ROMS history/averages files, it requires a special
			case.
			To run: Open python or ipython and type
			        "run ini_sst_circumpolar.py". The script
				will prompt you for paths to the ROMS
				grid file, the ROMS initialisation file,
				and the filename to save the figure as.

ini_sss_circumpolar.py: Like ini_sst_circumpolar.py, but for initial SSS.
                        To run: Open python or ipython and type
			        "run ini_sss_circumpolar.py". The script
				will prompt you for paths to the ROMS
				grid file, the ROMS initialisation file,
				and the filename to save the figure as.

zonal_plot.py: Creates a depth vs latitude plot of the given variable. You can
               choose to plot a single longitude slice, a zonal average over
	       all longitudes, or a zonal average between two specific
	       longitudes.
	       To run: Edit grid parameters near the top of the file, and the
	               value of "dlon" (regular longitude spacing for your
		       grid) in the function average_btw_lons. Then open
		       python or ipython and type "run zonal_plot.py". The
		       script will prompt you for paths to the ROMS grid file
		       and the ocean history or averages file, the name of the
		       variable to plot, the timestep number to plot, the type
		       of plot (single longitude, zonally averaged over all
		       longitudes, or zonally averaged between two specific
		       longitudes), the deepst depth to plot, optional bounds on
		       the colour scale, and whether to save the file (and if
		       so, the filename) or display it on the screen. As with
		       circumpolar_plot.py and circumpolar_cice_plot.py, the
		       interface will repeat as many times as you like, and you
		       only have to specify which parameters have changed since
		       the last plot.

overturning_plot.py: Calculate the meridional overturning streamfunction at the
                     last timestep of the given ROMS history/averages file and
		     make a contour plot in z-space.
		     To run: Open python or ipython and type
		             "run overturning_plot.py". You will be prompted
			     for the path to the ROMS history/averages file
			     and the filename with which to save the plot.

uv_vectorplot.py: Make a circumpolar Antarctic plot of speed overlaid with
                  velocity vectors at the given depth (surface, bottom, or
		  vertically aveaged).
		  To run: Open python or ipython and type
		          "run uv_vectorplot.py". You will be prompted for the
			  path to the ROMS history/averages file; the timestep;
			  whether to plot the surface, bottom, or vertically
			  averaged velocities; and whether to save the figure
			  (and if so, what filename to save it under) or display
			  it on the screen. As with the other interactive
			  plotting scripts, the interface will repeat as many
			  times as you like, and you only have to specify which
			  parameters have changed since the last plot.

massloss_map.py: Make a map of unexplained percent error in annually averaged
                 simulated basal mass loss from each ice shelf that is over
		 5,000 km^2 in Rignot et al., 2013.
		 To run: First make sure your logfile from
		         timeseries_massloss.py is up to date, as this script
			 reads simulated basal mass loss timeseries from this
			 logfile. Then open python or ipython and type
			 "run massloss_map.py". The script will prompt you for
			 paths to the ROMS grid file and the mass loss logfile,
			 and whether to save the figure (and if so, what
			 filename) or display it on the screen.

ismr_map.py: Same as massloss_map.py, but for area-averaged melt rates rather
             than area-integrated mass loss.
	     To run: First make sure your logfile from timeseries_massloss.py
	             is up to date, as this script reads simulated basal mass
		     loss timeseries from this logfile. Then open python or
		     ipython and type "run ismr_map.py". The script will prompt
		     you for paths to the ROMS grid file and the mass loss
		     logfile, and whether to save the figure (and if so, what
		     filename) or display it on the screen.

nsidc_aice_monthly.py: Make a figure comparing sea ice concentration from NSIDC
                       (1995 data) and CICE (latest year of spinup under
		       repeated 1995 forcing), for the given month.
		       To run: First edit the variables nsidc_head,
		               nsidc_head_0, nsidc_head_1, and nsidc_tail (near
			       the top of the file) to suit the paths to NSIDC
			       output on your filesystem. Then open python or
			       ipython and type "run nsidc_aice_monthly.py". The
			       script will prompt you for the CICE output file,
			       the month to plot, and whether to save the figure
			       (and if so, what filename) or display it on the
			       screen. As with the other interactive plotting
			       scripts, the interface will repeat as many times
			       as you like, and you only have to specify which
			       parameters have changed since the last plot.

nsidc_aice_seasonal.py: Like nsidc_aice_monthly.py, but creates a 4x2 plot
                        comparing NSIDC and CICE sea ice concentration averaged
			over each season (DJF, MAM, JJA, SON).
			To run: First edit the variables nsidc_head,
			        nsidc_head_0, nsidc_head_1, and nsidc_tail (near
			        the top of the file) to suit the paths to NSIDC
			        output on your filesystem. Then open python or
			        ipython and type "run nsidc_aice_seasonal.py".
			        The script will prompt you for the CICE output
			        file and whether you want to save the figure
				(and if so, what filename) or display it on the
			        screen. This script does not repeat.

ismr_plot.py: Creates a circumpolar plot of ice shelf melt rates averaged over
              the last year of simulation.
	      To run: Open python or ipython and type "run ismr_plot.py". The
	              script will prompt you for the path to a ROMS output file
		      containing at least one year of 5-day averages, and
		      ask you whether you want to save the figure (and if so,
		      what filename) or display it on screen.

bwtemp_plot.py: Creates a circumpolar plot of bottom water temperature, averaged
                over the last year of simulation.
		To run: Open python or ipython and type "run bwtemp_plot.py".
		        The script will prompt you for the path to a ROMS
			output file containing at least one year of 5-day
			averages, and ask you whether you want to save the
			figure (and if so, what filename) or display it on
			screen.

bwsalt_plot.py: Creates a circumpolar plot of bottom water salinity, averaged
                over the last year of simulation.
		To run: Open python or ipython and type "run bwsalt_plot.py".
		        The script will prompt you for the path to a ROMS
			output file containing at least one year of 5-day
			averages, and ask you whether you want to save the
			figure (and if so, what filename) or display it on
			screen.

sose_roms_seasonal.py: Make a 4x2 plot compring lat vs. depth slices of
                       seasonally averaged temperature or salinity at the given
		       longitude, between ROMS (last year of simulation) and
		       SOSE (2005-2010 climatology).
		       To run: First make the sure the path to the SOSE seasonal
		               climatology file, stored in the variable
			       sose_file near the top of the main function, is
			       correct. (If you don't have this file ask Kaitlin
			       for it.) Then open python or ipython and type
		               "run sose_roms_seasonal.py". You will be prompted
			       for the path to the ROMS output file, whether to
			       plot temperature or salinity, the longitude
			       slice to plot, the deepest depth to plot, and
			       whether to save the figure (and if so, what
			       filename) or display it on screen. As with other
			       interactive plotting scripts, the interface will
			       repeat as many times as you want and only ask for
			       changes to the existing options.

zice_circumpolar.py: Creates a circumpolar Antarctic plot of ice shelf draft.
                     To run: Open python or ipython and type
		             "run zice_circumpolar.py". The script will prompt
			     you for the path to the ROMS grid file and the
			     filename to save the figure under.

grid_res.py: Make a circumpolar plot of the horizontal resolution of the ROMS
             grid (square root of the area of each cell).
	     To run: Open python or ipython and type "run grid_res.py". You will
	             be prompted for the ROMS grid file, and whether to save the
		     figure (and if so, what filename) or display it on the
		     screen.

mld_plot.py: Create a circumpolar Antarctic plot of mixed layer depth in ROMS.
             Follows the same process as circumpolar_plot.py, but masking out
	     the ice shelves requires a special case.
	     To run: Open python or ipython and type "mld_plot.py". You will
	             be prompted for the ROMS output file, the timestep to
		     plot, colour bounds (optional), whether to save the figure
		     (and if so, what filename) or display it on the screen.
		     This script is non-repeating.

make_zonal_slices.sh: Example of a bash script that calls sose_roms_seasonal.py
                      for both temperature and salinity at 10 degree increments
		      all along the Antarctic coastline.
		      To run: First edit the variable ROMS_FILE to point to the
		              ROMS output file you want plots for (it must
			      contain at least 1 year of 5-day averages).
			      Also change whatever other arguments you want
			      in the calls to sose_roms_seasonal, such as the
			      output file name or the maximum depth to plot.
			      Then just type "./make_zonal_slices.sh" in the
			      shell and it will go.

aice_hi_seasonal.py: Creates a 4x2 plot of seasonally averaged sea ice
                     concentration (top row) and thickness (bottom row) over
		     the last year of simulation.
		     To run: Open python or ipython and type
		             "run aice_hi_seasonal.py". The script will prompt
			     you for the CICE output file and whether you want
			     to save the figure (and if so, what filename) or
			     display it on the screen. This script does not
			     repeat.

freezingpt_slice.py: Plot the difference from the freezing temperature for a
                     single i-slice (depth versus y) with no time-averaging,
		     spatial averaging, or interpolation. This helps to show
		     where there is spurious supercooling.
		     To run: Open python or ipython and type
		             "run freezingpt_slice.py". The script will prompt
			     you for the path to the ROMS history file, the
			     timestep and i-index to plot, the deepest depth
			     to plot, optional bounds on the colour scale,
			     and if you want to save the figure (and if so,
			     what filename) or display it on the screen. This
			     script repeats as many times as you like.

i_slice.py: Plot the given variable for a single i-slice (depth versus y) with
            no time-averaging, spatial averaging, interpolation, or velocity
	    rotation. This helps to show where there are advective errors.
	    To run: Open python or ipython and type "run i_slice.py". The
	            script will prompt you for the path to the ROMS history
		    file, the variable name, the timestep and i-index to plot,
		    the deepest depth to plot, optional bounds on the colour
		    scale, and if you want to save the figure (and if so, what
		    filename) or display it on the screen. This script repeats
		    as many times as you like.

cice_vectorplot.py: For any vector in the CICE output (velocities, stresses,
                    etc.) make a circumpolar Antarctic plot of its magnitude,
		    overlaid with the vectors themselves.
		    To run: Open python or ipython and type
		            "run cice_vectorplot.py". The script will prompt you
			    for the path to the CICE history file, the timestep
			    to plot, the names of the vector components,
			    optional bounds on the colour scale for magnitude,
			    and if you want to save the figure (and if so, what
			    filename) or display it on the screen. This script
			    repeats as many times as you like.

effective_thickness.py: Make a circumpolar plot of effective sea ice thickness
                        (area*height).
			To run: Open python or ipython and type
			        "run effective_thickness.py". The script will
				prompt you for the path to the CICE history
				file, the timestep to plot, optional bounds on
				the colour scale, and if you want to save the
				figure (and if so, what filename) or display it
				on the screen. This script repeats as many
				times as you like.

temp_salt_seasonal.py: Make a 4x2 plot showing lat vs. depth slides of
                       seasonally averaged temperature (top) and salinity
		       (bottom) at the given longitude, over the last year of
		       simulation.
		       To run: Open python or ipython and type
		               "run temp_salt_seasonal.py". The script will
			       prompt you for paths to the ROMS output file,
			       the longitude to plot, the deepest depth to
			       plot, and whether you want to save the figure
			       (and if so, what filename) or display it on
			       the screen. This script repeats as many times
			       as you like.


***ANIMATIONS***

aice_animation.py: Create an animation of sea ice concentration for the given
                   simulation, and save as an mp4 file.
		   To run: If you are on raijin, first type "module load ffmpeg"
		           to make sure you will be able to write the mp4 file.
			   Then edit the variables "directory", "num_ts", and
			   "start_file" near the top of the file to suit your
			   simulation. Then open python or ipython and type
			   "run aice_animation.py". Note that this isn't an
			   encapsulated function but rather just a script, so
			   be careful with existing variable names.


***FIGURES FOR ADVECTION PAPER***

adv_amery_tsplots.py: For each advection experiment, plot zonal slices of
                      temperature and salinity through 71E (Amery Ice Shelf)
		      at the end of the simulation. This is really just a
		      special case of zonal_plot.py.
		      To run: Make sure the paths to each simulation are
		              correct. Then open python or ipython and type
			      "run adv_amery_tsplots.py".

adv_freezingpt_slice.py: Plot the difference from the freezing temperature at
                         a specific timestep through the Weddell Sea in the
			 worst-performing advection experiment. There is no
			 time-averaging, spatial averaging, or interpolation.
			 This shows off the spurious supercooling. It is
			 really just a special case of freezingpt_slice.py.
			 To run: Make sure the file_path is correct. Then open
			         python or ipython and type
				 "run adv_freezingpt_slice.py".

adv_timeseries_volume.py: Plot timeseries of total sea ice volume for all the
                          advection experiments. Before running this script,
			  you must run timeseries_seaice for each experiment.
			  To run: Make sure the paths to directories and the
			          sea ice logfiles are correct. Then open
				  python or ipython and type
				  "run adv_timeseries_volume.py".


***UTILITY FUNCTIONS***

calc_z.py: Given ROMS grid variables, calculate the s-coordinates, stretching
           curves, and z-coordinates. Assumes Vtransform=2 and Vstretching=2.
	   To run: This is a function designed to be called from other
	           scripts. See for example romscice_nbc.py.

cartesian_grid_2d.py: Given ROMS grid variables, calculate 2D Cartesian
                      integrands dx and dy.
		      To run: This is a function designed to be called from
		              other scripts. See for example
			      timeseries_massloss.py

cartesian_grid_3d.py: Given ROMS grid variables, calculate 3D Cartesian
                      integrands dx, dy, and dz, as well as 3D z-coordinates.
		      To run: This is a function designed to be called from
		              other scripts. See for example spinup_plots.py.

rotate_vector_cice.py: Given a 2D vector in x-y space on the CICE grid, rotate
                       it to lon-lat space.
		       To run: This is a function designed to be called from
		               other scripts. See for example
			       circumpolar_cice_plot.py.

rotate_vector_roms.py: Given a 2D vector in x-y space on the ROMS grid
                       (x-component on the u-grid, y-component on the v-grid),
		       interpolate them both to the rho-grid and rotate the
		       vector to lon-lat space.
		       To run: This is a function designed to be called from
		               other scripts. See for example
			       circumpolar_plot.py.

unesco.py: Calculates the UNESCO seawater equation of state (1980): given
           temperature, salinity, and pressure (depth/10 is fine), returns
	   density.
	   To run: The function unesco is designed to be called by another
	           script. See make_density_file.py for an example.





               




